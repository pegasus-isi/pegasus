#!/bin/bash

set -e

TOP_DIR=`pwd`

export PATH=/scitech/shared/software/el8/montage/current/bin:$PATH
export LD_LIBRARY_PATH=/ccg/software/sqlite/3.8.11.1/lib:$LD_LIBRARY_PATH

rm -rf montage-workflow-v3
git clone https://github.com/pegasus-isi/montage-workflow-v3.git

echo
cd montage-workflow-v3
sed -i 's/wf.add_replica_catalog(rc)/rc.write("data\/rc.yml")/g' montage-workflow.py
PYTHONPATH=$(pegasus-config --python) \
    ./montage-workflow.py --center "275.196290 -16.171530" \
                      --degrees 0.2 \
                      --band 2mass:j:green \
                      --band 2mass:h:blue \
                      --band 2mass:k:red

sqlitedb=`mktemp -p ${PWD} pegasus-XXXX.jdbcrc.sqlite.db`
sqlitedburl=jdbc:sqlite:/${sqlitedb}

cat >>../pegasusrc <<EOF
pegasus.stageout.clusters = 20

#we don't want errors for registration to be masked because of retries
dagman.retry 0

pegasus.catalog.replica = JDBCRC
pegasus.catalog.replica.db.driver sqlite
pegasus.catalog.*.timeout = 30

pegasus.catalog.replica.db.url = ${sqlitedburl}
EOF

echo "Creating jdbcrc $sqlitedb"
pegasus-db-admin create ${sqlitedburl}

echo "Inserting input entries in the database..."
pegasus-rc-converter -I YAML -O File -i data/rc.yml -o data/rc.txt -vvv
pegasus-rc-client -vvv --conf ../pegasusrc --insert data/rc.txt

echo "Planning and submitting the workflow..."
pegasus-plan \
    --conf ../pegasusrc \
    --sites condorpool \
    --dir work \
    --output-sites local \
    --cleanup leaf \
    --cluster horizontal \
    --submit \
    data/montage-workflow.yml | tee $TOP_DIR/plan.out
