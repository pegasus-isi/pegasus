#!/bin/bash

set -e
set -o pipefail

TOP_DIR=`pwd`

# figure out where Pegasus is installed
export PEGASUS_BIN_DIR=`pegasus-config --bin`
if [ "x$PEGASUS_BIN_DIR" = "x" ]; then
    echo "Please make sure pegasus-plan is in your path"
    exit 1
fi

# build the dax generator
export PYTHONPATH=$(pegasus-config --python)
./blackdiamond.py $PEGASUS_BIN_DIR/.. a > one.dax
./blackdiamond.py $PEGASUS_BIN_DIR/.. d > two.dax

./super.py > super-blackdiamond.dax

echo "f.a" > f.a

# site catalog
cat >sites.xml <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<sitecatalog xmlns="http://pegasus.isi.edu/schema/sitecatalog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pegasus.isi.edu/schema/sitecatalog http://pegasus.isi.edu/schema/sc-4.0.xsd" version="4.0">
    <site handle="local" arch="x86_64" os="LINUX" osrelease="rhel" osversion="7">
        <directory type="shared-scratch" path="/scitech/shared/scratch-90-days/http-scratch/bamboo">
            <file-server operation="get" url="http://workflow.isi.edu/shared-scratch/bamboo"/>
            <file-server operation="put" url="file:///scitech/shared/scratch-90-days/http-scratch/bamboo"/>
        </directory>
        <directory type="local-storage" path="$TOP_DIR/outputs">
            <file-server operation="all" url="file://$TOP_DIR/outputs"/>
        </directory>
        <profile namespace="env" key="PEGASUS_BIN_DIR">$PEGASUS_BIN_DIR</profile>
    </site>
    <site  handle="condor_pool" arch="x86_64" os="LINUX">
        <profile namespace="pegasus" key="style">condor</profile>
        <profile namespace="condor" key="universe">vanilla</profile>
    </site>
</sitecatalog>
EOF

echo
echo
echo "The site catalog is:"
cat sites.xml

echo
echo
echo "Planning and submitting the workflow..."
pegasus-plan \
    --conf pegasusrc \
    --dir work \
    --sites condor_pool \
    --staging-site local \
    --output-sites local \
    --submit super-blackdiamond.dax  | tee $TOP_DIR/plan.out


WORK_DIR=`cat plan.out | grep pegasus-remove | sed -E 's/.*pegasus-remove[ ]+(.*)[ ]+/\1/'`
# account for deep submit directory structure
cd $WORK_DIR/00/00

BREAK=0
COUNTER=0

while [[ $BREAK -eq 0 && $COUNTER -lt 600 ]];
do
	sleep 1

	if [ -e "diamond-a_ID0000001/monitord.done" ]; then
		BREAK=1
	fi

	if [ -e "diamond-a_ID0000001/diamond-a-0.cache" ]; then
	        # ensure other than staged executables all data files have http urls in the cache
		set +e
		grep -v -P "diamond-.*-4\.0" diamond-a_ID0000001/diamond-a-0.cache | grep -v "http://"
		EC=$?
		set -e

		if [ $EC -eq 0 ]; then
			echo "Cache file contains non http URL's"
			exit 1
		fi

		exit 0
	fi

	let COUNTER=COUNTER+1
done

if [ $BREAK -eq 1 ]; then
	echo "Sub workflow finished, but did not find diamond-a_ID0000001/diamond-a-0.cache file"
	exit 2
else
	echo "Timer Expired: Waited 10 mins for diamond-a_ID0000001/diamond-a-0.cache file to be created"
	exit 3
fi

