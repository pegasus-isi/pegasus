#!/bin/bash

set -e

TOP_DIR=`pwd`

export PATH=/scitech/shared/software/el8/montage/current/bin:$PATH

# unique directory for this run
RUN_ID=`/bin/date +'%F_%H%M%S'`
RUN_DIR=`pwd`/work/$RUN_ID

rm -rf montage-workflow-v3
git clone https://github.com/pegasus-isi/montage-workflow-v3.git

echo
cd montage-workflow-v3
./montage-workflow.py --center "275.196290 -16.171530" \
                      --degrees 0.2 \
                      --band 2mass:j:green \
                      --band 2mass:h:blue \
                      --band 2mass:k:red

# override the site catalog
cat > sites.yml <<EOF
pegasus: "5.0"
sites:
 -
  name: "CCG"
  arch: "x86_64"
  os.type: "linux"
  profiles:
    env:
      MONTAGE_HOME: "/scitech/shared/software/el8/montage/current"
      http_proxy: "workflow.isi.edu:3128"
    pegasus:
      style: "condor"
 -
  name: "local"
  arch: "x86_64"
  os.type: "linux"
  directories:
   -
    type: "sharedScratch"
    path: "$RUN_DIR/scratch"
    fileServers:
     -
      operation: "all"
      url: "file://$RUN_DIR/scratch"
   -
    type: "sharedStorage"
    path: "$RUN_DIR/outputs"
    fileServers:
     -
      operation: "all"
      url: "file://$RUN_DIR/outputs"
  grids:
   -
    type: "gt5"
    contact: "localhost/jobmanager-fork"
    scheduler: "fork"
    jobtype: "auxillary"
  profiles:
    env:
      http_proxy: "workflow.isi.edu:3128"
 -
  name: "CCGData"
  arch: "x86"
  os.type: "linux"
  directories:
   -
    type: "sharedScratch"
    path: "/webdav/scratch-90-days"
    fileServers:
     -
      operation: "all"
      url: "webdavs://workflow.isi.edu/webdav/scratch-90-days"
EOF

pegasus-plan \
        --conf ../pegasusrc \
        --dir work \
        --relative-dir `date +'%s'` \
        --sites CCG \
        --staging-site CCGData \
        --output-sites local \
        --cluster horizontal \
	data/montage-workflow.yml \
        | tee $TOP_DIR/plan.out


WORK_DIR=`cat $TOP_DIR/plan.out | grep pegasus-run | sed -E 's/.*pegasus-run[ ]+//'`
if [ "x$WORK_DIR" = "x" ]; then
    echo "Unable to determine work directory from the planner output"
    exit 1
fi
echo "work directory is $WORK_DIR"
cd $WORK_DIR

# make sure that none of the http inputs are in the stage in jobs
for STAGE_IN in `find $WORK_DIR -name stage_in_\*.in`; do
    if (cat $STAGE_IN | grep "http://") >/dev/null 2>&1; then
        echo "Error: $STAGE_IN has a http:// file even though we asked for a bypass"
        exit 1
    fi
done

# now we are good to submit
echo "Submitting the workflow for execution"
pegasus-run $WORK_DIR
