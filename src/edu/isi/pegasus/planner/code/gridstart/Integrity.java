/**
 * Copyright 2007-2008 University Of Southern California
 *
 * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * <p>http://www.apache.org/licenses/LICENSE-2.0
 *
 * <p>Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.isi.pegasus.planner.code.gridstart;

import edu.isi.pegasus.common.logging.LogManager;
import edu.isi.pegasus.planner.classes.ADag;
import edu.isi.pegasus.planner.classes.Job;
import edu.isi.pegasus.planner.classes.PegasusBag;
import edu.isi.pegasus.planner.classes.PegasusFile;
import edu.isi.pegasus.planner.common.PegasusProperties;
import edu.isi.pegasus.planner.namespace.Metadata;
import edu.isi.pegasus.planner.partitioner.graph.GraphNode;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

/**
 * A class the contains the various functions to add integrity invocations to jobs.
 *
 * @author Karan Vahi
 */
public class Integrity {

    /** Basename for our pegasus integrity check tool in the worker pacakge. */
    public static final String PEGASUS_INTEGRITY_CHECK_TOOL_BASENAME = "pegasus-integrity";

    /** The stdin file descriptor keyword */
    public static final String STDIN_FILE_DESCRIPTOR = "stdin";

    /** The LogManager object which is used to log all the messages. */
    protected LogManager mLogger;

    /** The object holding all the properties pertaining to Pegasus. */
    protected PegasusProperties mProps;

    /** The submit directory where the submit files are being generated for the workflow. */
    protected String mSubmitDir;

    public Integrity() {}

    /**
     * Initializes the GridStart implementation.
     *
     * @param bag the bag of objects that is used for initialization.
     * @param dag the concrete dag so far.
     */
    public void initialize(PegasusBag bag, ADag dag) {
        mLogger = bag.getLogger();
        // mSiteStore = bag.getHandleToSiteStore();
        mSubmitDir = bag.getPlannerOptions().getSubmitDirectory();
        mProps = bag.getPegasusProperties();
    }

    /**
     * Adds the integrity check invocations for jobs input files
     *
     * @param sb
     * @param files
     * @return a colon separated list of files to be passed via the stdin
     */
    public String addIntegrityCheckInvocation(StringBuilder sb, Collection<PegasusFile> files) {
        StringBuilder flist = new StringBuilder();
        for (PegasusFile file : files) {
            if (file.isDataFile() || file.isExecutable() || file.isContainerFile()) {
                // PM-1375 first check if integrity checking is turned off
                // for the file explicitly
                boolean generate = file.doIntegrityChecking();
                if (generate) {
                    generate =
                            (file.isRawInputFile())
                                    ?
                                    // PM-1250 for raw input files, an extra check to see if
                                    // there is a checksum associated or not, or generated by
                                    // pegasus-transfer
                                    file.hasRCCheckSum() || file.hasChecksumComputedInWF()
                                    :
                                    // we always generate invocation for intermediate files
                                    true;
                }

                // PM-1254 disable check for checkpoint files
                if (file.isCheckpointFile()) {
                    generate = false;
                }

                if (generate) {
                    if (flist.length() > 0) {
                        flist.append(";;;");
                    }
                    flist.append(file.getLFN());
                }
            }
        }
        if (flist.length() > 0) {
            sb.append(Integrity.PEGASUS_INTEGRITY_CHECK_TOOL_BASENAME)
                    .append(" --print-timings --verify=")
                    .append(STDIN_FILE_DESCRIPTOR);
        }
        return flist.toString();
    }

    /**
     * Updates the job tracking of the meta files of the parents
     *
     * @param job
     * @param file metadata file that may need to be associated
     * @param baseSubmitDir
     * @return
     */
    public boolean modifyJobForIntegrityChecks(Job job, File file, String baseSubmitDir) {

        // sanity check
        // for jobs with no input files, we don't need to transfer
        // any meta file
        boolean empty = job.getInputFiles().isEmpty();
        boolean isCompute = job.getJobType() == Job.COMPUTE_JOB;

        if (empty && isCompute) {
            // PM-1252 only for compute jobs we have this short circuit
            mLogger.log(
                    "No meta file to transfer, as no input files assocaited with job "
                            + job.getID(),
                    LogManager.DEBUG_MESSAGE_LEVEL);
            return true;
        }

        if (file != null) {
            // associate the file.
            job.condorVariables.addIPFileForTransferFromWFSubmitDir(file.getAbsolutePath());
        }

        // try and get hold of the parents
        GraphNode node = job.getGraphNodeReference();
        for (GraphNode parentNode : node.getParents()) {
            Job parent = (Job) parentNode.getContent();
            boolean addMeta = false;
            if (job.getJobType() == Job.COMPUTE_JOB) {
                // we need meta files for only compute  and stage-in jobs that are parents
                addMeta =
                        (parent.getJobType() == Job.COMPUTE_JOB
                                || parent.getJobType() == Job.STAGE_IN_JOB);
            } else if (job.getJobType() == Job.STAGE_OUT_JOB) {
                // PM-1252 we need meta files for only compute jobs that are parents
                addMeta = (parent.getJobType() == Job.COMPUTE_JOB);
            }
            if (addMeta) {
                // we need meta files for only compute  and stage-in jobs that are parents
                StringBuilder metaFile = new StringBuilder();
                metaFile.append(baseSubmitDir)
                        .append(File.separator)
                        .append(parent.getRelativeSubmitDirectory())
                        .append(File.separator)
                        .append(parent.getID())
                        .append(".meta");
                job.condorVariables.addIPFileForTransferFromWFSubmitDir(metaFile.toString());
            }
        }

        return true;
    }

    /**
     * Generate a metadata file containing the metadata for input files if it exists
     *
     * @param name
     * @param files
     * @return A metafile with the suffix, else null
     */
    public File generateChecksumMetadataFile(String name, Collection<PegasusFile> files) {

        // subset files that have any metadata associated with them
        List<PegasusFile> metaFiles = new LinkedList();
        for (PegasusFile file : files) {
            if (file.isDataFile() || file.isExecutable() || file.isContainerFile()) {
                Metadata m = file.getAllMetadata();
                if (!m.isEmpty()) {
                    metaFiles.add(file);
                }
            }
        }
        if (metaFiles.isEmpty()) {
            // nothing to write
            return null;
        }

        File metaFile = null;
        PrintWriter pw = null;
        try {
            metaFile = new File(name);
            pw = new PrintWriter(metaFile);
            pw.println("[");
            StringBuilder sb = new StringBuilder();
            for (PegasusFile pf : metaFiles) {
                sb.append("\n").append("\t{");
                sb.append("\n")
                        .append("\t\t")
                        .append("\"_type\": \"")
                        .append(pf.getTypeAsString())
                        .append("\"")
                        .append(",");
                sb.append("\n")
                        .append("\t\t")
                        .append("\"_id\": \"")
                        .append(pf.getLFN())
                        .append("\"")
                        .append(",");

                sb.append("\n").append("\t\t").append("\"_attributes\": {");
                Metadata m = pf.getAllMetadata();
                for (Iterator<String> it = m.getProfileKeyIterator(); it.hasNext(); ) {
                    String key = it.next();
                    sb.append("\n").append("\t\t\t");
                    sb.append("\"")
                            .append(key)
                            .append("\"")
                            .append(":")
                            .append("\"")
                            .append(m.get(key))
                            .append("\"")
                            .append(",");
                }
                // remove trailing ,
                sb = sb.deleteCharAt(sb.length() - 1);
                sb.append("\n").append("\t\t").append("}"); // end of attributes

                // end of pegasus file
                sb.append("\n").append("\t").append("}").append(",");
            }
            // remove trailing ,
            sb = sb.deleteCharAt(sb.length() - 1);
            pw.print(sb);
            pw.println("\n]");
        } catch (FileNotFoundException ex) {
            throw new RuntimeException("Unable to generate input metadata file  " + name, ex);
        } finally {
            if (pw != null) {
                pw.close();
            }
        }
        return metaFile;
    }
}
